paste(my_char, collapse=" ")
my_name<-c(my_char,"Ishan")
my_name
paste(my_name, collapse=" ")
paste("Hello","world!", sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4, sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData<-sample(c(y,z),100)
myNA<-is.na(myData)
myNa
myNA
myData==NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
x<-[!is.na(x)]
x<-[!is.na(x)]
x<-x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[3:7]<-c(1)
sbt<-c(3,5,7)
c(3,5,7)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11,| bar = 2, norf = NA)
vect <- c(foo = 11,bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2.NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myVector<-1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<-c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix<-myVector
?matrix()
?matrix
myMatrix2<-matrix(c(1:20),nrow=4,ncol=5)
identical(myMatrix,myMatrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,myMatrix)
myData<-data.frame(patients,myMatrix)
myData
class(myDat)
class(myData)
cnames<-c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)<-cnames
myData
swirl()
bye()
exit()
exit
skip()
set.seed(1)
rpois(5,2)
set.seed(10)
x<-rbinom(10,10,0.5)
e<-rnorm(10,0,20)
y<-0.5+2*x+e
y
?y
??y
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverseMatrix <- function(InverseMatrix) m <<- InverseMatrix
getInverseMatrix <- function() m
list(set = set, get = get,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
#The following function calculates the inverse matrix of makeCacheMatrix.
#It first checks to see if the inverse matrix has already been calculated.
#If yes, it gets the value from the cache and skips the computation.
#Otherwise, it calculates the inverse matrix of the data and sets the value of the inverse matrix
#in the cache via the setInverseMatrix function and return it.
cacheSolve <- function(x, ...) {
m <- x$getInverseMatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverseMatrix(m)
m
}
m
cx<-matrix(rnorm(25,0,1),5,5)
cx
tr<-makeCacheMatrix(cx)
tr$getinv
inv<-cachesolve(tr)
inv
inv<-cacheSolve(tr)
inv
inv
inv<-cacheSolve(tr)
inv
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## 2. The cacheSolve function will return the inverse of a matrix
## It will first search for a cached matrix using an if statement
## It will use the solve function to return the inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cx<-matrix(rnorm(25,0,1),5,5)
cx
tr<-makeCacheMatrix(cx)
inv<-cacheSolve(tr)
inv
inv<-cacheSolve(tr)
inv*tr
inv%*%tr
cx<-matrix(rnorm(25,0,1),5,5)
cx
tr<-makeCacheMatrix(cx)
tr$getinv
inv<-cacheSolve(tr)
inv
inv%*%tr
inv %*% tr
inv %*% tr
inv<-cacheSolve(tr)
inv
inv %*% cx
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## 2. The cacheSolve function will return the inverse of a matrix
## It will first search for a cached matrix using an if statement
## It will use the solve function to return the inverse
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
cx<-matrix(rnorm(25,0,1),5,5)
cx
tr<-makeCacheMatrix(cx)
inv<-cacheSolve(tr)
inv
inv %*% cx
makeCacheMatrix <- function(self = matrix()) {
inverse <- NULL
set <- function(other) {
self <<- other
inverse <<- NULL
}
get <- function() self
setInverse <- function(value) inverse <<- value
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve - retreive the cached inverse of a cacheMatrix "matrix"
# if it exists, otherwise, calculate the inverse and update the cacheMatrix
# with the new inverse value before returing it.
#
## cacheSolve takes as arguments:
# cacheMatrix - special matrix created using `makeCacheMatrix`
# ... - arguments passed to solve when calculating inverse
#
## cacheSolve returns the inverse of the cacheMatrix
cacheSolve <- function(cacheMatrix, ...) {
inverse <- cacheMatrix$getInverse
if(!is.null(inverse)) {
message("getting cached inverse")
return(inverse)
}
data <- cacheMatrix$get()
inverse <- solve(data, ...)
cacheMatrix$setInverse(inverse)
inverse
}
cx<-matrix(rnorm(25,0,1),5,5)
cx
tr<-makeCacheMatrix(cx)
inv<-cacheSolve(tr)
tr<-makeCacheMatrix(cx)
inv<-cacheSolve(tr)
inv
inv
makeCacheMatrix <- function(self = matrix()) {
inverse <- NULL
set <- function(other) {
self <<- other
inverse <<- NULL
}
get <- function() self
setInverse <- function(value) inverse <<- value
getInverse <- function() inverse
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## cacheSolve - retreive the cached inverse of a cacheMatrix "matrix"
# if it exists, otherwise, calculate the inverse and update the cacheMatrix
# with the new inverse value before returing it.
#
## cacheSolve takes as arguments:
# cacheMatrix - special matrix created using `makeCacheMatrix`
# ... - arguments passed to solve when calculating inverse
#
## cacheSolve returns the inverse of the cacheMatrix
cacheSolve <- function(cacheMatrix, ...) {
inverse <- cacheMatrix$getInverse
if(!is.null(inverse)) {
message("getting cached inverse")
return(inverse)
}
data <- cacheMatrix$get()
inverse <- solve(data, ...)
cacheMatrix$setInverse(inverse)
inverse
}
cx<-matrix(rnorm(25,0,1),5,5)
cx
tr<-makeCacheMatrix(cx)
inv<-cacheSolve(tr)
inv
inv %*% cx
makeCacheMatrix <- function(x = matrix()) {
# clear old value by default
s <- NULL
# set new value by set function
set <- function(y){
x <<- y
s <<- NULL
}
# get function
get <- function()s
# setters and getters function
setsolve <- function(solve) s <<- solve
getsolve <- function()s
# return mapping of functions as output operation, just like functions class in OOP
list(
# Outter Name = Inner Name
set = set,
get = get,
setsolve = setsolve,
getsolve = getsolve
)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
# get solve value from x
s <- x$getsolve()
# check if s have a value then return it, otherwise get it
if(!is.null(s)) {
message("getting cached data")
return(s)
}
# get value of s
data <- x$get()
# calculate the solve
s <- solve(data, ...)
# save result into environment
x$setsolve(s)
## Return a matrix that is the inverse of 'x'
s
}
cx<-matrix(rnorm(25,0,1),5,5)
cx
tr<-makeCacheMatrix(cx)
inv<-cacheSolve(tr)
inv
head(household_power_consumption)
library(UsingR)
install.packages("UsingR")
library(UsingR)
a <- 5
s <- 2
n <- 20
error <- qnorm(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
a <- 1100
s <- 30
n <- 9
error <- qnorm(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
a <- 1100
s <- 30
n <- 9
error <- qnorm(0.95)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
a <- -2
error <- 2
n <- 9
s<-error*sqrt(n)/qnorm(0.95)
s
vp<-(0.6+6.8)/2
sp<-sqrt(vp)
sp
vp<-(0.6+.68)/2
sp<-sqrt(vp)
sp
error<-qnorm(0.95)*sp*sqrt(.2)
error
up<-error-2
lp<--2-error
lp
up
error<-qnorm(0.975)*sp*sqrt(.2)
error
up<-error-2
lp<--2-error
lp
up
vx<-.5
nx<-100
mx<-6
sy<-0.5
ny<-100
my<-4
vp<-((vx)^2+(vy)^2)/2
sp<-sqrt(vp)
vy<-0.5
ny<-100
my<-4
vp<-((vx)^2+(vy)^2)/2
sp<-sqrt(vp)
sp
sx<-2
sy<-0.5
vp<-((sx)^2+(sy)^2)/2
sp<-sqrt(vp)
sp
error<-qnorm(0.975)*sp*sqrt(.02)
error
up<-error+2
lp<-2-error
lp
up
sx<-1.8
nx<-9
mx<-1
sy<-1.5
ny<-9
my<--3
vp<-((sx)^2+(sy)^2)/2
sp<-sqrt(vp)
sp
error<-qnorm(0.95)*sp*sqrt(2/9)
error
up<-error-4
lp<--4-error
lp
up
error<-qnorm(0.90)*sp*sqrt(2/9)
error
up<-error-4
lp<--4-error
lp
up
error<-qnorm(0.95)*sp*sqrt(2/9)
error
up<-error-4
lp<--4-error
lp
up
error<-qnorm(0.90)*sp*sqrt(2/9)
error
up<-error-4
lp<--4-error
lp
error<-qt(0.95)*sp*sqrt(2/9)
error<-qt(0.95,16)*sp*sqrt(2/9)
error
up<-error-4
lp<--4-error
lp
up
sp<-30
error<-qt(0.975,8)*sp/sqrt(9)
error
sp<-2*sqrt(9)/qt(0.975,8)
sp
sx<-.68
sy<-.6
vp<-((sx)^2+(sy)^2)/2
sp<-sqrt(vp)
error<-qt(0.975,18)*sp/sqrt(.2)
error
up<-error-2
lp<--2-error
lp
up
sp
error<-qt(0.975,18)*sp/sqrt(.2)
error
up<-error-2
lp<--2-error
lp
up
sp
sx<-sqrt(.68)
sy<-sqrt(.6)
vp<-((sx)^2+(sy)^2)/2
sp<-sqrt(vp)
sp
error<-qt(0.975,18)*sp/sqrt(.2)
error
up<-error-2
lp<--2-error
lp
up
error<-qt(0.975,18)*sp/sqrt(.2)
error
error<-qt(0.95,18)*sp/sqrt(.2)
error
up<-error-2
lp<--2-error
lp
up
error<-qt(0.95,18)*sp*sqrt(.2)
error
error<-qt(0.975,18)*sp*sqrt(.2)
error
up<-error-2
lp<--2-error
lp
up
library(slidify)
slidify(index.Rmd)
slidify("C:\\Users\\ISHAN\\Documents\\GitHub\\dataproducts\\index.Rmd")
publish(user="ishanbhaway",repo="dataproducts",host="github")
slidify(index.Rmd)
slidify("index.Rmd")
setwd("~/GitHub/dataproducts")
slidify("index.Rmd")
publish(user="ishanbhaway",repo="dataproducts",host="github")
slidify("index.Rmd")
